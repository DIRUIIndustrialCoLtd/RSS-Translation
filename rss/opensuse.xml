<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title> openSUSE 新闻</title><link/>https://news.opensuse.org<description> openSUSE 项目的最新消息</description><atom:link href="https://news.opensuse.org/feed.xml" rel="self" type="application/rss+xml"></atom:link><item><guid> https://news.opensuse.org/2024/01/15/clear-course-is-set-for-os-leap/</guid><title> openSUSE Leap 的明确路线已定</title><pubDate>Mon, 15 Jan 2024 11:00:00 +0000</pubDate><link/> https://news.opensuse.org/2024/01/15/clear-course-is-set-for-os-leap/<author> admin@opensuse.org（Lubos Kocman 和 Douglas DeMaio） </author><enclosure length="9579191" type="image/png" url="https://news.opensuse.org/wp-content/uploads/2024/01/leap.png"></enclosure><description> openSUSE 发布团队确认将会有 Leap 15 的继任者，这是数字上的飞跃。正如许多人热切期待今年 Leap 15.6 的到来一样，Leap 16 作为继任者的道路也在等待着。 openSUSE Leap 基于 SUSE 新的 Adaptable Linux Platform (ALP) 代码库...</description><content:encoded> &lt;p>;openSUSE 发布团队确认将有 Leap 15 的后继版本，这是数字上的飞跃。&lt;/p>; &lt;p>;正如许多人热切等待今年 Leap 15.6 的到来一样，Leap 16 作为后继者的道路等待着。 openSUSE Leap 16 基于 SUSE 新的 Adaptable Linux Platform (ALP) 代码库，将先进的企业服务器分发的优点与用户友好的维护和安全性结合起来，这是 Leap 系列的标志。&lt;/p>; &lt;p>;Leap 16旨在在 SUSE 开发的 ALP 和有效集成社区软件包的举措中出现的尖端和传统 Linux 操作系统之间取得平衡。&lt;/p>; &lt;p>;向 Leap 16 的过渡不仅仅是一个数字步骤-上升，但象征着技术和用户体验方面的重要进步。 openSUSE Leap 的未来基于 SUSE Adaptable Linux Platform 的创新概念。&lt;/p>; &lt;p>;Adaptable Linux Platform 为下一代 openSUSE Leap、Leap Micro 和 SUSE 解决方案提供支持。它使发行版更具适应性，更适合云原生工作负载，同时还能够处理快速的创新。&lt;/p>; &lt;p>;没有计划放弃 Leap 的经典（非不可变）选项；非不可变或不可变安装变体均可用于 Leap 15，并计划用于 Leap 16。这将仍然是人们部署 Leap 的首选方式。&lt;/p>; &lt;p>;鼓励每个人参与 Leap 的开发通过提供反馈、打包、测试、文档和任何其他方式来创建这些新平台。&lt;/p>; &lt;p>;Leap 将继续遵循 &lt;a href=&quot;https://en.opensuse.org/openSUSE:Factory_development_model&quot;>; openSUSE 工厂开发模型&lt;/a>;。&lt;/p>; &lt;p>;开发过程将涉及收集需求，包括来自社区研讨会的需求，以确保 Leap 16.0 满足用户不断变化的需求​​。 openSUSE 社区已经开始关注 Leap 16 的预期推出。&lt;/p>; &lt;p>;除了 Leap 16，&lt;a href=&quot;https://get.opensuse.org/leapmicro/&quot;>;Leap Micro&lt;/ a>; 6.0将接替Leap Micro 5系列。它基于 SUSE Linux Enterprise Micro 6.0，专注于容器化和虚拟化工作负载。&lt;/p>; &lt;p>;Leap 和 Leap Micro 都将为用户提供清晰的迁移路径和充足的升级时间。如果 Leap 16 延迟，发布团队可能会延长 Leap 15.6 的生命周期，或者作为最后的手段，发布 Leap 15.7 以确保足够的重叠。 Leap 16 将确保发布与 Leap 15 的生命周期结束之间没有间隙。&lt;/p>; &lt;p>;人们可以在项目的 &lt;a href=&quot;https://en.opensuse.html&quot; 上找到有关 Leap 16 的信息更新。 org/openSUSE:Roadmap&quot;>;路线图页面&lt;/a>;。发布团队将分享 Leap 16 开发何时开始以及如何通过&lt;a href=&quot;https://en.opensuse.org/openSUSE:Communication_channels&quot;>;官方 openSUSE 渠道&lt;/a>;参与。&lt;/p>; &lt;meta name=&quot;openSUSE、开发人员、系统管理员、用户、开源、后继者、路线图、Leap、开发人员、适应性 Linux 平台、ALP、Leap Micro&quot; content=&quot;HTML,CSS,XML,JavaScript&quot; />;</content:encoded></item><item><guid> https://news.opensuse.org/2024/01/12/conference-adds-business-focused-networking-event/</guid><title>会议增加了以业务为中心的社交活动</title><pubDate>Fri, 12 Jan 2024 09:00:00 +0000</pubDate><link/> https://news.opensuse.org/2024/01/12/conference-adds-business-focused-networking-event/<author> admin@opensuse.org（道格拉斯·德马约） </author><enclosure length="3574307" type="image/png" url="https://news.opensuse.org/wp-content/uploads/2024/01/opfbiz.png"></enclosure><description> openSUSE 项目很高兴地宣布 Open 4 Business 网络活动，这是一项由 DORS/CLUC 组织发起的协作计划，定于 6 月 26 日下午 2 点至 6 点在德国纽伦堡弗兰肯校区举行。该活动将与 openSUSE Con​​ference 2024 (oSC24) 同期举行，...</description><content:encoded> &lt;p>;&lt;a href=&quot;https://www.opensuse.org/&quot;>;openSUSE 项目&lt;/a>;很高兴地宣布 Open 4 Business 网络活动，这是一项由 &lt;a href=&quot;https://www.opensuse.org/&quot;>;openSUSE 项目发起的协作计划://www.dorsluc.org/open-4-business/&quot;>;DORS/CLUC&lt;/a>; 组织，定于 6 月 26 日下午 2 点至 6 点在德国纽伦堡弗兰肯校区举行。&lt;/p>; &lt;p >;本次活动将与 &lt;a href=&quot;https://events.opensuse.org/&quot;>;openSUSE Con​​ference 2024&lt;/a>; (oSC24) 同期举行，致力于促进开源行业的联系&lt;/p>; &lt;p>;该活动旨在帮助建立一个商业环境，以帮助在开源道德和技术方面持有相似价值观的中小企业 (SME) 保持一致。 Open 4 Business 活动旨在充当连接开源爱好者的桥梁。此次活动将帮助商界人士有效参与和协作。&lt;/p>; &lt;p>;Open 4 Business 旨在实现的主要目标是：&lt;/p>; &lt;ul>; &lt;li>;强调商界与开源社区&lt;/li>; &lt;li>;提供一个实现可持续和开放业务的平台&lt;/li>; &lt;li>;促进与开源项目的业务合作&lt;/li>; &lt;li>;促进中小企业、自由职业者之间的网络和合作伙伴关系和企业&lt;/li>; &lt;/ul>; &lt;p>;对于任何渴望扩展业务网络、发现新项目并与专家同行交流的人来说，此次活动都是一个机会。该项目邀请您参加 Open 4 Business 活动。&lt;/p>; &lt;p>;openSUSE 项目谨向 DORS/CLUC 组织表示感谢，感谢他们在发起 #open4business 网络活动中所发挥的作用，并旨在帮助扩展将此商业网络活动与其他社区驱动的开源技术会议联系起来。&lt;/p>; &lt;p>;要参加，请发送电子邮件至 ddemaio@opensuse.org，主题为“open4business”，或在 4 小时 Open 4 Business 选择项下提交提案。 Open 4 Business 活动的演讲将于 6 月 26 日在 4 小时内举行，每位演讲者每次演讲的持续时间不超过 15 分钟。请注意，本次活动的会谈将在商业网络轨道下进行，与 6 月 27 日至 29 日举行的会议技术轨道不同。该活动将在 Katzwanger Str. 举行。 130，位于纽伦堡 SUSE 办事处旁边的底层。&lt;/p>; &lt;p>;提交 &lt;a href=&quot;https://events.opensuse.org/&quot;>;oSC24&lt;/a>; 提案的时间为开放至 4 月 15 日。会议将在 &lt;a href=&quot;https://z-bau.com/&quot;>;Z-Bau&lt;/a>; 举行，位于纽伦堡 SUSE 办事处的街道上。&lt;/ p>; &lt;meta name=&quot;openSUSE、Rancher、开发人员、系统管理员、用户、开源、导师、学员、Google 代码之夏、研讨会&quot; content=&quot;HTML,CSS,XML,JavaScript&quot; />;</content:encoded></item><item><guid> https://news.opensuse.org/2024/01/09/project-plans-workshop-for-gsoc-mentorship/</guid><title>项目将举办导师申请研讨会</title><pubDate>Tue, 09 Jan 2024 10:00:00 +0000</pubDate><link/> https://news.opensuse.org/2024/01/09/project-plans-workshop-for-gsoc-mentorship/<author> admin@opensuse.org（道格拉斯·德马约） </author><enclosure length="2243648" type="image/png" url="https://news.opensuse.org/wp-content/uploads/2024/01/workshop.png"></enclosure><description> openSUSE 项目将于世界标准时间 1 月 16 日 15:30 在 meet.opensuse.org/meeting 上举办研讨会，重点讨论今年的 Google Summer of Code 申请和指导工作。 openSUSE 项目有着参与 GSoC 的悠久传统以及希望作为导师参与的社区成员...</description><content:encoded> &lt;p>;&lt;a href=&quot;https://www.opensuse.org/&quot;>;openSUSE 项目&lt;/a>;将于世界标准时间 1 月 16 日 15:30 在 &lt;a href=&quot;https:// meet.opensuse.org/meeting&quot;>;meet.opensuse.org/meeting&lt;/a>; 将重点关注今年的 &lt;a href=&quot;https://summerofcode.withgoogle.com/&quot;>;Google 编程之夏&lt;/a >; 申请和指导工作。&lt;/p>; &lt;p>;openSUSE 项目有着参与 GSoC 的悠久传统，想要作为导师参与的社区成员应该参加或更新他们想要在 &lt;a href=&quot;https 上列出的项目://101.opensuse.org/&quot;>;101.opensuse.org&lt;/a>;，在 openSUSE 的 &lt;a href=&quot;https://github.com/openSUSE/mentoring&quot;>;GitHub Mentoring&lt;/a>; 上提出问题>; 项目。&lt;/p>; &lt;p>;研讨会将在 &lt;a href=&quot;https://calendar.opensuse.org/teams/marketing/events/tuesday_weekly_meeting&quot;>;openSUSE 社区会议&lt;/a>;之后确定金额可以列出今年申请的项目，申请开放时间为 1 月 22 日至 2 月 6 日。&lt;/p>; &lt;p>;研讨会将为导师和想要参与指导的人员提供足够的时间来描述几个项目想法在管理员提交 GSoC 申请之前。&lt;/p>; &lt;p>;鼓励参与者在 &lt;a href=&quot;https://etherpad.opensuse.org/p/GSoC2024WS&quot;>; 研讨会之前创建一些项目构想的大纲活动的 etherpad&lt;/a>;。&lt;/p>; &lt;p>;参加过之前 Google 编程之夏计划的导师和管理员将参加研讨会。&lt;/p>; &lt;meta name=&quot;openSUSE、Rancher、开发人员、系统管理员、用户、开源、导师、受训者、Google 代码之夏、研讨会&quot; content=&quot;HTML,CSS,XML,JavaScript&quot; />;</content:encoded></item><item><guid> https://news.opensuse.org/2023/12/20/systemd-fde/</guid><title> Tumbleweed 和 MicroOS 中的 Systemd 引导和全磁盘加密</title><pubDate>Wed, 20 Dec 2023 15:00:00 +0000</pubDate><link/> https://news.opensuse.org/2023/12/20/systemd-fde/<author> admin@opensuse.org（阿尔贝托·普拉纳斯） </author><enclosure length="7899" type="image/png" url="https://news.opensuse.org/wp-content/uploads/2023/12/systemd-light.png"></enclosure><description> Tumbleweed 和 MicroOS 中的 Systemd-boot 和全磁盘加密 openSUSE Tumbleweed 和 MicroOS 现在提供一个使用 systemd-boot 作为引导加载程序的映像，并且也基于 systemd 进行全磁盘加密。加密设备的解锁可以通过传统密码、TPM2（加密设备...</description><content:encoded> &lt;h1 id=&quot;systemd-boot-and-full-disk-encryption-in-tumbleweed-and-microos&quot;>;Tumbleweed 和 MicroOS 中的 Systemd-boot 和全磁盘加密&lt;/h1>; &lt;p>;openSUSE Tumbleweed 和 MicroOS 现已支持提供使用 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;systemd-boot&lt;/code>; 作为引导加载程序的映像，并基于 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;systemd 进行全磁盘加密&lt;/code>;。加密设备的解锁可以通过传统密码来完成，TPM2（系统中已存在的加密设备）将附加如果系统运行状况良好，则为设备，或者用于验证令牌所有权的 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;FIDO2&lt;/code>; 密钥。&lt;/p>; &lt;p>;有很多在这里解释一下，但基本上这些变化都是为了将​​发行版转移到更安全的地方。一方面是使发行版的设计更加简单，另一方面它遵循其他发行版也符合的当前安全趋势。&lt;/p>; &lt;p>;所以，让我们从头开始......&lt;/ p>; &lt;h2 id=&quot;systemd-boot&quot;>;systemd-boot&lt;/h2>; &lt;p>;我们都知道并且喜欢 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;GRUB2&lt;/code>;。这是一个很好的引导加载程序。它又大、复杂、丰富、庞大，并且在开发方面往往进展缓慢。&lt;/p>; &lt;p>;此引导加载程序的 openSUSE 软件包包含 200 多个补丁。其中一些补丁已经存在了过去 5 年、6 年……10 年。这既表明了维护者的才华，也表明了上游贡献过程可能有多慢的问题。&lt;/p>; &lt;p>;&lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;GRUB2&lt; /code>; 支持所有相关系统，包括大型机、&lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;arm&lt;/code>; 或 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;powerpc&lt;/code>;。多种类型的文件系统，包括 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;btrfs&lt;/code>; 或 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;NTFS&lt;/code>;。它包含一个完整的网络堆栈、一个 USB 堆栈、一个终端，可以编写脚本……从某种意义上说，它本身几乎就是一个迷你操作系统。 rouge&quot;>;UEFI&lt;/code>; 出现于 18 年前，使得 GRUB2 提供的几乎所有功能在某种程度上变得多余。系统固件已经将大部分功能作为服务提供，可供操作系统、引导加载程序或任何其他用户提供的应用程序使用。当然 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;GRUB2&lt;/code>; 也支持 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;UEFI&lt;/code>;。&lt;/p>; &lt;p>;很快Linux 内核可以通过可附加到内核代码的存根来编译为 EFI 二进制文件。这意味着内核本身可以由固件直接启动，从而使引导加载程序在大多数情况下成为可选的。&lt;/p>; &lt;p>;随着时间的推移，新的、更简单的引导加载程序专注于 &lt;code class=&quot;language-出现纯文本highlighter-rouge&quot;>;UEFI&lt;/code>;，例如&lt;a href=&quot;https://cgit.freedesktop.org/gummiboot/&quot;>;&lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;gummiboot&lt;/code >;&lt;/a>;。后来这段代码被集成到 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;systemd&lt;/code>; 中，并重命名为 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;systemd-boot&lt;/code>;。&lt;/code>; p>; &lt;p>;代码非常简单。比 GRUB2 简单许多数量级。它基本上是一个非常小的 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;EFI&lt;/code>; 二进制文件，它显示一个包含不同引导加载程序条目的菜单（&lt;a href=&quot;https:// 中描述的文本文件） uapi-group.org/specations/specs/boot_loader_specification/&quot;>;引导加载程序规范&lt;/a>; 或简称 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;BLS&lt;/code>;），以及对 &lt; code class=&quot;language-plaintexthighlighter-rouge&quot;>;UEFI&lt;/code>; &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;LoadImage&lt;/code>; 函数将执行委托给选定的内核。&lt;/p>; &lt; p>;此引导加载程序还可以使用新的&lt;a href=&quot;https://uapi-group.org/specations/specs/unified_kernel_image/&quot;>;统一内核映像&lt;/a>; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;>;UKI&lt;/code>;)，这些文件将内核、命令行和 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;initrd&lt;/code>; 聚合在一个单元中。这些 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;UKI&lt;/code>; 对于基于图像的发行版来说非常方便，openSUSE 也计划支持它们。&lt;/p>; &lt;p>;提供 &lt;code class= openSUSE 长期以来一直希望将“language-plaintexthighlighter-rouge&quot;>;systemd-boot&lt;/code>; 作为 GRUB2 的替代品。 2023 年 8 月，工厂邮件列表上发布了&lt;a href=&quot;https://lists.opensuse.org/archives/list/factory@lists.opensuse.org/thread/4FNZ7HEPH6KQQ2JVFNPN7PXWHZZRU5H5/&quot;>;公告&lt;/a>;，内容涉及Tumbleweed 支持 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;systemd-boot&lt;/code>;。&lt;/p>; &lt;p>;该公告引用了 &lt;a href=&quot;https://en.opensuse.org/Systemd -boot&quot;>;wiki 条目&lt;/a>;，解释如何使用 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;GRUB2&lt;/code>; 将安装迁移到 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;手动启动 systemd。公告发布后不久，&lt;a href=&quot;https://github.com/yast/yast-bootloader/pull/686&quot;>;&lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;yast-bootloader&lt;/code>; 获得了&lt;/a>; 支持新安装。&lt;/p>; &lt;p>;支持其他引导加载程序需要付费。正如所争论的那样，代码库更小，错误更少，并且更容易推理。但是 UEFI 依赖项减少了支持的架构（x86-64 和 aarch64）的数量。通过为 GRUB2 提供另一个补丁来支持 BLS，可以大大缓解这个问题>; 条目，因此引导加载程序之后的分发架构可以独立于引导加载程序本身。好消息是该补丁已经存在，并且可能会添加到包中。&lt;/p>; &lt;p>;另一个问题是 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;systemd-boot&lt;/code>;不会说 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;btrfs&lt;/code>;。作为一个 EFI 二进制文件，它只能从 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;FAT32 文件系统读取文件。通过将内核和 initrd 移至 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;EFI&lt;/code>; 系统分区 (&lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;ESP&lt; /code>;)。&lt;/p>; &lt;p>;最后，还要考虑支持 Tumbleweed 中的快照和 MicroOS 中的事务。从引导加载程序中，用户应该能够选择从哪个快照引导，就像使用 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;GRUB2&lt;/code>; 时实际上可以做到的那样。这两个概念都是使用 btrfs 子卷实现的，并且只有内核、命令行、&lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>; 的子集initrd&lt;/code>; 组合对每个子卷都有效。&lt;/p>; &lt;p>;例如，假设我们的系统中有两个快照，每个快照都代表一个安装了两个内核的系统。所有快照中的这两个内核可能都不相同。也许其中一项升级用较新的版本替换了一个内核。我们需要一些工具来完成关联正确组合所需的簿记工作，从而成功引导到任何这些快照，并在这些限制下创建引导条目。&lt;/p>; &lt;p>;这个工具是 &lt;a href=&quot; https://github.com/yast/yast-bootloader/pull/686&quot;>;&lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;sdbootutil&lt;/code>;&lt;/a>;。每次 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;snapper&lt;/code>; 创建或销毁快照时（例如，当系统更新时），它都会调用此工具来分析快照的内容，确保相应的内核安装在 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;ESP&lt;/code>; 中，这是一个有效的 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;initrd&lt;/code>;该内核存在（如果不存在，则会调用 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;mkinitrd&lt;/code>; 创建），并创建一个连接内核的引导条目，&lt;code class=&quot;language-纯文本highlighter-rouge&quot;>;initrd&lt;/code>; 和通过命令行的快照。它还负责其他细节，例如检查分区上的可用空间。&lt;/p>; &lt;p>;通常他的过程透明地工作，但最好记住我们可以通过以下方式强制进入干净状态：&lt;/p>; &lt;div class=&quot;language-plaintexthighlighter-rouge&quot;>;&lt;div class=&quot;highlight&quot;>;&lt;pre class=&quot;highlight&quot;>;&lt;code>;sdbootutil add-all-kernels sdbootutil remove-all-kernels &lt;/code>;&lt;/pre>; &lt;/div>;&lt;/div>; &lt;p>;以防万一，你知道......&lt;/p>; &lt;h2 id=&quot;full-disk-encryption&quot;>;全盘加密&lt;/h2>; &lt;p>;我们想要的其他方面宣布支持基于 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;systemd&lt;/code>; 的全盘加密 (&lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;FDE&lt;/code>;)。 &lt;/p>; &lt;p>;&lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;FDE&lt;/code>; 并不是新事物。 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;GRUB2&lt;/code>; 很久以前就可以使用 &lt;code class=&quot;language -纯文本荧光笔-rouge&quot;>;cryptomount&lt;/code>; 命令。传统上，这将向用户请求密码两次：一次是在引导加载程序进行解锁时，另一次是在 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;initrd&lt;/code>; 稍后执行相同操作时。有多种方法可以避免第二个请求将密码注入到 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;initrd&lt;/code>; 中，或者，如果您使用的是 openSUSE 包，它会将密码透明地注入到 &lt; code class=&quot;language-plaintexthighlighter-rouge&quot;>;initrd&lt;/code>;。&lt;/p>; &lt;p>;最近 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;GRUB2&lt;/code>; 获得了两个新功能：部分支持 LUKS2 加密设备（使用 PBKDF2 作为密钥派生函数，而不是更多安全且推荐的 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;Argon2id&lt;/code>;）和密钥保护机制，可以将机密存储在 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;TPM2&lt; /code>;.&lt;/p>; &lt;h2 id=&quot;tpm2&quot;>;&lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;TPM2&lt;/code>;&lt;/h2>; &lt;p>;解释如何&lt;code class=&quot;language-明文highlighter-rouge&quot;>;TPM2详细工作原理是另一篇文章的主题，但现在我们可以将其视为一种加密设备，仅在与系统状态相关的某些条件下才用于解锁秘密都满足了。如果系统处于健康状态，&lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;TPM2&lt;/code>; 将解锁该秘密。&lt;/p>; &lt;p>;该术语是一个技术术语，与断言系统处于&lt;strong>;已知&lt;/strong>;良好状态。换句话说，我们确信固件没有被篡改，引导加载程序是我们安装的并且没有被替换，内核正是来自发行版的内核，内核命令行是我们所期望的，并且我们使用的 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;initrd&lt;/code>; 不包含任何我们无法控制的额外二进制文件。&lt;/p>; &lt;p>;在内部，TPM2 有一些寄存器，称为平台配置寄存器 (PCR)。在 TPM2 规范中，有 24 个，其中一个的大小足以存储哈希函数的值，例如 &lt;code class=&quot;language-纯文本highlighter-rouge&quot;>;SHA1&lt;/code>;或&lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;SHA256&lt;/code>;。它们由库分隔：每个受支持的散列函数一个，但目前细节太多。&lt;/p>; &lt;p>;这些寄存器有点特殊。我们可以重置它们，通常将值设置为 0。我们可以读取值，或者我们可以“扩展”它们。写操作的设计方式是我们不能在寄存器中设置任何随机值，除了关联的哈希函数连接当前 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;PCR&lt;/code>; 值和用户提供的新值。&lt;/p>; &lt;p>;PCR 的当前值只能通过使用完全相同的扩展此寄存器来生成值的序列。如果我们更改其中一个值的哪怕一点点，对于相同的 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;PCR&lt;/code>;，我们都会产生截然不同的最终结果。&lt;/p>; &lt;p>;This该功能用于称为“测量启动”的过程，其中启动链中的每个阶段都会被测量在执行之前。这意味着在固件的初始阶段运行之前，有一个进程将计算内存中代码的哈希值，并扩展其中一个 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;PCR&lt;/code >; 使用该值。重复此操作，直到启动序列的最后：内核和 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;initrd&lt;/code>;。&lt;/p>; &lt;p>;当测量启动到位时，前 10 个 PCR 的最终值将包含只有在机器使用众所周知版本的固件、引导加载程序和内核时才能预测的值，以及相关数据，如证书、配置文件或内核参数。如果这些元素之一发生更改（例如，通过使用不同的安全启动证书），它将生成与我们预期不同的 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;PCR&lt;/code>; 值。&lt; /p>; &lt;p>;&lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;TPM2&lt;/code>; 芯片是非常有趣的设备，其功能集远远超出了测量启动范围。如果您想了解更多信息，我推荐诸如&lt;a href=&quot;https://developers.tpm.dev/&quot;>;此&lt;/a>;或&lt;a href=&quot;https://trustedcomputinggroup.org/resource/a- practical-guide-to-tpm-2-0/&quot;>;这个&lt;/a>;。&lt;/p>; &lt;h2 id=&quot;tpm2-for-fde&quot;>;&lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;TPM2 &lt;/code>; for &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;FDE&lt;/code>;&lt;/h2>; &lt;p>;无论如何，这里的要点是我们可以创建一个可以指示 &lt;code仅当某些 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;PCR 包含预期值时，TPM2 才能解密机密。细节有点不同，但现在让我们使用这个模型作为一个很好的第一个近似值。&lt;/p>; &lt;p>;我们的想法是，我们可以使用某些 &lt;code class=&quot;language-plaintext 荧光笔的值来加密密码-rouge&quot;>;PCR&lt;/code>; 注册，因此 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;GRUB2&lt;/code>; 稍后可以附加 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;LUKS2&lt;/如果 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;TPM2&lt;/code>; 可以恢复密码，则验证系统的运行状况，直到此时。如果 TPM2 无法解密，则意味着某些 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;PCR 尚未解密预期值和启动过程中的某些阶段发生了变化。在这种情况下，GRUB2 将要求用户提供密码以继续加载内核和系统的其余部分。它将对新状态的信任委托给用户。&lt;/p>; &lt;p>;&lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;GRUB2&lt;/code>; 还提供了一个工具，可以在当前的值下密封秘密。 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;PCR&lt;/code>; 的子集。这很好，但也带来了一些问题。一个是，也许我们正在以一种我们知道 PCR 值将在下次启动期间发生变化的方式设置系统（例如，在第一次启动期间）安装、引导加载程序升级或固件更新）。在这种情况下，使用当前寄存器值密封密码是没有用的：我们需要能够预测新的值并使用这些假设值来进行密封。&lt;/p>; &lt;p>;另一个问题更加隐蔽，将会变得更加危险。稍后批评。期望值可能会经常变化并且不能是唯一的。也许有一组有效的。我们可以选择从不同的内核或不同的快照启动。 TPM2 使用所谓的授权策略为此提供了解决方案。它们是创建可以更改的策略的一种方式，但它们是通过签名进行验证的。本质上，我们创建一个公钥和一个私钥，并创建多个使用私钥签名的 PCR 策略。现在，TPM2 可以使用公共部分验证签名，并使用 PCR 解封秘密。 /code>; 的值存储在新策略中。&lt;/p>; &lt;p>;自 2023 年初起，openSUSE 提供 &lt;a href=&quot;https://github.com/okirch/pcr-oracle&quot;>;&lt;code class=&quot;language -plaintexthighlighter-rouge&quot;>;pcr-oracle&lt;/code>;&lt;/a>; 工具，帮助预测 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;PCR&lt;/code>; 寄存器，并加密密钥在使用 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;PCR&lt;/code>; 策略或授权策略的这些值下。使用此工具，我们现在可以在一组可以更改的 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;PCR&lt;/code>; 值下密封秘密！&lt;/p>; &lt;p>;在 &lt;a href= “https://en.opensuse.org/SDB:Encrypted_root_file_system&quot;>;openSUSE wiki&lt;/a>; 我们可以找到有关这些主题的更多文档，包括有关如何在我们的安装中使用它的说明。&lt;/p>; &lt;h2 id= &quot;using-systemd-for-disk-encryption&quot;>;使用 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;systemd&lt;/code>; 进行磁盘加密&lt;/h2>; &lt;p>;使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;>;GRUB2&lt;/code>; &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;FDE&lt;/code>; 工作正常，那么为什么还要寻找其他东西呢？有一个原因非常明显：只有使用我们的 openSUSE &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;GRUB2&lt;/code>; 版本，这种架构才能工作……好吧……。它不适用于其他引导加载程序，例如 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;systemd-boot&lt;/code>;。事实上，它不适用于 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;GRUB2&lt;/code>; 本身的上游版本。&lt;/p>; &lt;p>;但是还有第二个原因：我们可以说&lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;GRUB2&lt;/code>; 没有完整的测量引导。如果引导加载程序需要在加载内核之前解锁设备，那么自然会评估引导加载程序的 PCR 策略。系统的健康状况无法对将使用的内核、命令行或 initrd 进行断言。这些将在 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;LUKS2&lt;/code>; 设备打开后加载。&lt;/p>; &lt;p>;使用 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;LUKS2&lt;/code>; 设备。 &quot;>;systemd-boot&lt;/code>; 为我们提供了 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;FDE&lt;/code>; 的替代架构，它可以与遵循 &lt;code class=&quot;language 的任何引导加载程序正常工作-plaintexthighlighter-rouge&quot;>;BLS&lt;/code>; （记住，有一个 &lt;code class=&quot;language-plaintexthighlighter-rouge&quot;>;GRUB2&lt;/code>; 的补丁来支持它，所以它不被排除&lt;em >;先验&lt;/em>;），并提供了在解锁设备之前进行完整测量的启动证明的机会。&lt;/p>; &lt;p>;一个区别是内核和&lt;code class =“ langaging-plaintext highlighter- Rouge“>; initrd &lt;/code>;将放置在未加密的&lt;code class =“ language-plaintext Highlighter-rouge”>; esp &lt;/code>;中，并解锁&lt;code class =“ languagen-plaintext Highlighter-rouge” >; SYSRoot &lt;/code>;将使用&lt;code class =“ language-plaintext Highlighter-rouge”>; initrd &lt;/code>;使用&lt;code class =“ language-plaintext highlighter-rouge”>; systemd-- CryptSetup &lt;/code>;提供。当前，它可以使用普通密码解锁设备，a &lt;code class =“ Language-Plaintext Highlighter-Rouge”>; tpm2 &lt;/code>;使用授权策略（可选的是用户必须输入的PIN）或a &lt;code class =“ language-plaintext Highlighter-Rouge”>; fido2 &lt;/code>;键设备。在&lt;code class =“ language-plaintext Highlighter-rouge”>;/etc/crypttab &lt;/code>;文件中，我们需要&lt;a href =“ https://www.freedesktop.org/software/software/software/systemdware/systemd/systemd/man/man/latest/ crypttab.html“>;描述&lt;/a>;解锁机制。&lt;/p>; &lt;p>; &lt;code class =“ language-plaintext Highlighter-rouge”>; pcr-oracle &lt;/code>;已扩展以支持授权的创建&lt;code class =“语言 -  plaintext Highlighter-rouge”>; SystemD &lt;/code>;可以理解的策略。它们存储在&lt;code class =“ language-plaintext Highlighter-rouge”>; json &lt;/code>;文件中，其中包含多个预测，每个文件都指示&lt;code class =“ language-plaintext Highlighter-rouge”>; pcr &lt; /code>; s，&lt;code class =“ language-plaintext Highlighter-rouge”>; tpm2 &lt;/code>;策略哈希，公共密钥的指纹和策略的签名。这与公共密钥&lt;code class =“ language-plaintext Highlighter-rouge”>; pem &lt;/code>;文件，构成了&lt;code class =“ language-plaintext Highlighter-rouge”>; systemd-cryptsetup &lt;&lt;code class =“ /code>;用于使用&lt;code class =“ language-plaintext Highlighter-rouge”>; tpm2 &lt;/code>; &lt;/code>; &lt;code class =“ language-plaintext Highlighter-rouge”>; luks2 &lt;/code>; key。 /p>; &lt;p>; &lt;code class =“ language-plaintext Highlighter-rouge”>; rsa &lt;/code>; 2048用于签署策略的密钥可以使用&lt;code class =“ language-plaintext Highlighter-rouge”>; openssl &lt;/code>;或&lt;code class =“ language-plaintext Highlighter-rouge”>; pcr-oracle &lt;/code>;本身。注意：如果私钥被泄漏，这是一款游戏，可以预期的安全性，即&lt;code class =“ language-plaintext Highlighter-rouge”>; tpm2 &lt;/code>;可以提供。幸运的是，在这种情况下，该解决方案很便宜：生成一个新密钥，在&lt;code class =“ landing-plaintext Highlighter-rouge”中重新注册键Highlighter-Rouge”>; SystemD-Cryptenroll &lt;/code>;并使用&lt;code class =“ language-plaintext Highlighter-rouge”>; sdbootutil &lt;/code>;以重新生成每个启动条目的预测。是的……我们将在&lt;a href=&quot;https://en.opensuse.org/systemd-fde&quot;>;“ Systemd-fde” Wiki页面&lt;/a>;中记录所有过程。确实是一个便宜的操作。&lt;/p>; &lt;p>; OpenSuse正在提供&lt;a href=&quot;https://build.opensuse.org/package/package/show/devel:microos：microos：microos：images/opensuse-microos! &lt;/a>;名为&lt;a href=&quot;http://download.opensuse.org/tumbleweed/appliances/opensuse-microos.x86_64-kvm-kvm-and-xen-sdboot.qcow2&quot;>; a>;显示了所有这些工作的工作。此图像包含一些已经提到的工具集成的工具和其他一些新工具：&lt;/p>; &lt;ul>; &lt;li>; &lt;code class =“ language-plaintext Highlighter-rouge”>; systemd-boot &lt;/code>;：使用的启动加载程序已使用而不是默认&lt;code class =“ language-plaintext Highlighter-rouge”>; grub2 &lt;/code>; &lt;/li>; &lt;li>; &lt;li>; &lt;code class =“ language-plaintext Highlighter-rouge”>; sdbootutil &lt;/code>;：helper scripts要同步系统的引导条目&lt;/li>; &lt;li>; &lt;code class =“ language-plaintext Highlighter-rouge”>; pcr-oracle &lt;/code>;：预测&lt;code class =“ language-plaintext highlighter-rouge” >; pcr &lt;/code>; s下一个启动的值，并为&lt;code class =“ language-plaintext Highlighter-rouge”创建授权的策略”>; systemd &lt;/code>; &lt;/code>; &lt;/li>; &lt;li>; &lt;li>; &lt;code class =“语言” -plaintext Highlighter-Rouge“>; disk-compryption-tool &lt;/code>;：加密&lt;code class =“ language-plaintext Highlighter-rouge”>; sysroot &lt;/code>;位于第一个启动&lt;/li>; &lt;/li>; &lt;/li>; &lt;/code &lt;/code &lt;/code &lt;/code &lt;/code &lt;/code &lt;/code &lt;/code li>; &lt;code class =“ language-plaintext Highlighter-rouge”>; dracut-pcr-signature &lt;/code>;：&lt;code class =“ language-plaintext highlighter-rouge”>; dracut &lt;/code>; dracut &lt;/code>;模块，将预测加载到&lt;code class =“ language-plaintext Highlighter-rouge”>; intrd &lt;/code>;来自&lt;code class =“ language-plaintext Highlighter-rouge”>; esp &lt;/code>; &lt;/code>; &lt;/li>; &lt;/li>; &lt;/ul>; &lt;p>; &lt;p>;这些工具旨在为此新的&lt;code class =“ language-plaintext Highlighter-rouge”>; fde &lt;/code>;架构一起工作。接下来是关于如何连接的简要说明。&lt;/p>; &lt;p>;一旦我们获得了新的microos &lt;code class =“ language-plaintext Highlighter-rouge”>; qcow2 &lt;/code>; image，我们设置了VM，我们可以继续启动过程。如果VM具有虚拟&lt;code class =“ language-plaintext Highlighter-rouge”>; tpm2 &lt;/code>;设备，它将开始测量执行的代码和数据，扩展相应的&lt;code class =“ Lanaging-Plaintext Highlighter-Rouge” >; pcr &lt;/code>; s。一旦达到了&lt;code class =“ language-plaintext Highlighter-rouge”>; Systemd-boot &lt;/code &lt;/code>;，它将找到此会话的正确启动条目，并将读取相应的内核和&lt;code class =“ languaging-plaintext Highlighter-Rouge“>; Initrd &lt;/code>;从中。&lt;/p>; &lt;p>;此时未加密图像。在第一个启动期间使用的&lt;code class =“ language-plaintext Highlighter-rouge”>; initrd &lt;/code>;，&lt;code class =“ language-plaintext Highlighter-rouge”>; disk-contryption-tool &lt;/code &lt;/code &lt;/code &lt;/code >;脚本将被调用。使用一些启发式方法，它将找到属于&lt;code class =“ language-plaintext Highlighter-rouge”>; sysroot &lt;/code>;（系统所在的位置）的分区，并将其调整大小以保留32MB的&lt;code class = &lt;code class = “语言 -  plaintext Highlighter-Rouge”>; luks2 &lt;/code>;标题。之后，它将使用&lt;code class =“ language-plaintext Highlighter-rouge”>; cryptsetup &lt;/code>;提供的所有魔术，以使用本地生成的密码重新加入设备。截至目前，此密码对应于将在结尾显示给用户的恢复密钥，并且用户应注意并确保其安全。&lt;/p>; &lt;p>;重新加入后，系统&lt;code &lt;code &lt;/p>; &lt;p>; class =“语言 -  plaintext Highlighter-rouge”>;/etc/crypttab &lt;/code>;将更新以通信，以确保该设备现在已加密，并应稍后使用不同的工具进行管理。&lt;/p>; &lt;p>; &lt;/p>; &lt;p>; &lt;code class =“ language-plaintext Highlighter-rouge”>; initrd &lt;/code>;我们切换到新的&lt;code class =“ language-plaintext Highlighter-rouge”>; sysroot &lt;/code &lt;/code>;，现在最终位于加密设备中。 &lt;code class =“ language-plaintext Highlighter-rouge”>;磁盘加密工具&lt;/code>;脚本已经完成了主要作业，但是它为&lt;code class =“ language-plaintext highlighter-rouge”安装了两个模块-firstboot &lt;/code>;，将在系统的第一个引导中执行，该系统正在发生！&lt;/p>; &lt;p>;第一个模块，&lt;code class =“ language-plaintext Highlighter-rouge”>; enroll &lt; /code>;，将检测是否存在&lt;code class =“ language-plaintext Highlighter-rouge”>; fido2 &lt;/code>;键插入键，并且&lt;code class =“ language-plaintext Highlighter-rouge”>; tpm2 &lt;/code>;可用的。如果是这样，它将提出一个对话框，询问您要使用什么来解锁系统。第二个模块将询问用户是否&lt;code class =“ language-plaintext Highlighter-rouge”>; root &lt;/code>;密码也将在&lt;code class =“ language-plaintext Highlighter-rouge”>; luks2 &lt;/代码>;标题为新密钥，并将显示早期生成的恢复密钥。&lt;/p>; &lt;p>;截至今天，建议两者都不适合注册。如前所述，&lt;code class =“语言 -  plaintext Highlighter-rouge”>; fido2 &lt;/code>;键，如果我们使用笔记本电脑或台式机机器，我们希望使用标记证明的加密设备解锁加密设备我们拥有的。这是一个互动过程。 &lt;code class =“语言 -  plaintext Highlighter-rouge”>; tpm2 &lt;/code>;在我们不想与系统交互的情况下更有意义，并且只有在我们可以断言健康状况的情况下，我们才希望自动解锁设备系统（启动链中没有篡改）。&lt;/p>; &lt;p>;如果我们注册&lt;code class =“ language-plaintext Highlighter-rouge”>; fido2 &lt;/code>;键，&lt;code class =“语言” -plaintext Highlighter-Rouge“>; SystemD-Cryptenroll &lt;/code>;将被调用，我们将被要求两次按下按钮，并且安装过程将结束。在下一个启动时，我们将需要显示密钥，如果丢失了密钥，将询问恢复密码。&lt;/p>; &lt;p>;如果我们注册&lt;code class =“ language-plaintext Highlighter-rouge” >; tpm2 &lt;/code>;设备，一个新的&lt;code class =“ language-plaintext Highlighter-rouge”>; rsa &lt;/code>; 2048键在&lt;code class中生成和存储（公共和私有零件） Highlighter-Rouge”>;/etc/systemd &lt;/code>;和&lt;code class =“ language-plaintext Highlighter-rouge”>; Systemd-cryptenroll &lt;/code>;将用于注册公钥并注释&lt;code class =在密封&lt;code class =“ language-plaintext Highlighter-rouge”>; luks2 &lt;/code>;键中使用的“语言 -  plaintext Highlighter-rouge”>; PCR &lt;/code>; s。默认情况下，我们将使用0、2、4、7和9。一个>;。 &lt;code class =“ language-plaintext Highlighter-rouge”>; pcr &lt;/code>; s 0和2将测量所有&lt;code class =“ language-plaintext Highlighter-rouge”>; uefi &lt;/code &lt;/code>;固件代码。在也是UEFI二进制文件）。 &lt;code class =“ language-plaintext Highlighter-rouge”>; pcr &lt;/code>; 7将注册所有安全的引导证书，&lt;code class =“ language-plaintext Highlighter-rouge”>; pcr &lt;/code>; 9将被使用由内核测量命令行，&lt;code class =“ language-plaintext Highlighter-rouge”>; initrd &lt;/code>;。&lt;/p>; &lt;p>;这几乎涵盖了所有可能有意义的对测量方法有最后一个词的用户。原因是预测是在&lt;code class =“ language-plaintext Highlighter-rouge”>; sdbootutil &lt;/code>;内完成的，请记住，该系统将在系统中每次更改后自动执行（更新，包装删除，快照管理，快照管理，等），此工具将仅对&lt;code class =“ language-plaintext Highlighter-rouge”>; pcr &lt;/code>;在&lt;code class =“ landagy-plaintext Highlighter-rouge”中注册的预测代码>;标题。&lt;/p>; &lt;p>;不管选定的解锁机制如何，&lt;code class =“ language-plaintext highlighter-rouge”>;/etc/crypttab &lt;/code>;文件将使用此选择和新的选择更新&lt;code class =“ language-plaintext Highlighter-rouge”>;将生成Initrd &lt;/code>;以包含下一个启动的此信息。&lt;/p>; &lt;p>;最后，最后一个组件，&lt;code class =&#39;language-class-色解锁将在&lt;code class =“语言 -  plaintext Highlighter-rouge”>; initrd &lt;/code>;中存在“即时”。应该注意的是，&lt;code class =“ language-plaintext Highlighter-rouge”>; initrd &lt;/code>;将需要带有策略和密钥的JSON文件，但是这些文件不能包含在&lt;code class =“ language-class-”中。明文荧光笔 - >; initrd &lt;/code>;！当我们对&lt;code class =“ language-plaintext Highlighter-rouge”>; pcr &lt;/code>;进行预测的那一刻，该>; pcr &lt;/code>;随着&lt;code class =“ language-plaintext Highlighter-rouge”>; initrd &lt; /code>;，仅此而言，我们无法再触摸&lt;code class =“ language-plaintext Highlighter-rouge”>; initrd &lt;/code>;，因为这将产生新的哈希，并且会自动将预测无效。&lt;/p>; &lt;p>;此&lt;code class =“ language-plaintext Highlighter-rouge”>; dracut &lt;/code>;模块将在&lt;code class =“ language-plaintext Highlighter-rouge”>; systemd-cryptsetup &lt;/code &lt;/code>; for for Generator &lt;/code class =“任何加密的设备都已经启动，并将在&lt;code class =“ language-plaintext Highlighter-rouge”>; ESP &lt;/code>; &lt;code class =“ language-plaintext Highlighter-rouge”>; tpm2-pm2-pcr-signature的分区.json &lt;/code>;文件，其中包含当前启动的所有有效预测。此文件到位后，&lt;code class =“ language-plaintext Highlighter-rouge”>; systemd-crypsetup &lt;/code>;将能够在当前状态下断言设备是预期的，并且启动过程可以继续直到直到直到结尾。&lt;/p>; &lt;h2 id =“未来”>;未来&lt;/h2>; &lt;p>;图像在这里，是一个声音POC。它提供了更简单的体系结构，并将某些组件放在正确的位置。这将在下一阶段有很多帮助，因为我们还想处理与&lt;code class =“ language-plaintext Highlighter-rouge”>; fde &lt;/code>;。&lt;/p>;的其他一些事情。 &lt;p>;一个非常清晰的&lt;code class =“ language-plaintext Highlighter-rouge”>;磁盘加密工具&lt;/code>;具有有限的基于图像的安装。该代码的一部分应生活在&lt;code class =“ language-plaintext Highlighter-rouge”>; yast &lt;/code>;和&lt;code class =“ language-plaintext Highlighter-rouge”>; Agama &lt;/code>;中。安装程序已经在创建&lt;code class =“ language-plaintext Highlighter-rouge”>; luks2 &lt;/code>;设备，因此以对我们有用的方式扩展它应该“容易”。&lt;/p>; &lt;p>;理想情况下，&lt;code class =“ language-plaintext Highlighter-rouge”>; jeos-firstboot &lt;/code>;模块也应该生活在安装程序中，但是在这里它们也有意义。在任何情况下，都不应分开功能，并且都应合并。&lt;/p>; &lt;p>;加密工具从一开始就做某事：主密钥以及所有用户键在安装时间内生成，但一种可能的改进是在稍后使用&lt;code class =“ language-plaintext Highlighter-rouge”>; Systemd &lt;/code>;工具生成恢复密钥。这是一个小细节，但是将系统键与用户键分开可以简化架构。&lt;/p>; &lt;p>;改进的另一个方面是用户可能想要使用&lt;code class =“ language-plaintext Highlighter-rouge” >; tpm2 &lt;/code>;和&lt;code class =“ language-plaintext Highlighter-rouge”>; fido2 &lt;/code>;同时。例如，默认情况下，使用&lt;code class =“ language-plaintext Highlighter-rouge”>; tpm2 &lt;/code>;，并且如果阶段以失败的预测方式更改（或者存在已检测到的安全漏洞），用户可以将解锁委托给&lt;code class =“ language-plaintext Highlighter-rouge”>; fido2 &lt;/code>;键，而不是使用密码。&lt;/p>; &lt;p>; &lt;code class =“语言” -plaintext Highlighter-Rouge“>; sdbootutil &lt;/code>;脚本包含一堆功能，这些功能也应生活在&lt;code class =“ language-plaintext Highlighter-rouge”>; systemd &lt;/code>; &lt;/code>;。与上游合作将使此工具随着时间的推移而过时，这将是更多的消息。&lt;/p>; &lt;p>;我们可以在&lt;code class =“ language-plaintext Highlighter-rouge”中提供帮助的另一个改进。 >;是为了提高诊断的原因，使&lt;code class =“ language-plaintext Highlighter-rouge”>; tpm2 &lt;/code>;拒绝&lt;code class =“ language-plaintext Highlighter-rouge”>; luks2 &lt;/代码>;键。今天，我们有一条通用的失败消息，而无需报告什么&lt;code class =“ language-plaintext Highlighter-rouge”>; pcr &lt;/code>;或&lt;code class =“ language-plaintext Highlighter-rouge”>; pcr &lt;/code class =“ lategan-plaintext Highlighter-rouge”>; pcr代码>;报告的哈希与预期的哈希相关。这将有助于低估出什么问题。引导加载程序是否更改？或固件中的东西？&lt;/p>; &lt;p>; &lt;code class =“ language-plaintext Highlighter-rouge”>; pcr-oracle &lt;/code>;是预测下一个&lt;code class =“语言 -  plaintext）的好工具Highlighter-Rouge“>; pcr &lt;/code>;值。很容易扩展到与完整测量的启动过程相关的日志中的新事件，包括内核，&lt;code class =“ language-plaintext Highlighter-rouge”>; systemd-boot &lt;/code &lt;/code &lt;/code>; extensions on &lt;code on &lt;code class =“ language-plaintext Highlighter-rouge”>; pcr &lt;/code>; 12，或生成&lt;code class =“ language-plaintext Highlighter-rouge”>; json &lt;/code>; &lt;/code>; &lt;code class =“ language-plaintextextext” Highlighter-Rouge“>; SystemD &lt;/code>;。新的&lt;code class =“ language-plaintext Highlighter-rouge”>; SystemD &lt;/code>; 255（一周前从撰写本文开始）包含一个名为&lt;code class =“ language-plaintext Highlighter-rouge”的类似工具>; SystemD-Pcrlock &lt;/code>;可以帮助我们提供所需的改进诊断。评估此工具进行预测也将很快完成。&lt;/p>; &lt;p>;今天类型1和类型＃2条目从&lt;code class =“ language-plaintext Highlighter-rouge”>; bls &lt;/code &lt;/code>;不是同构。 &lt;code class =“ language-plaintext Highlighter-rouge”>; efi &lt;/code>; &lt;code class =“ language-plaintext Highlighter-rouge”>; uki &lt;/code>;格式不存在文本表示。也许我们会决定在将来使用&lt;code class =“语言 -  plaintext Highlighter-rouge”>; uki &lt;/code>; s，或者也许不是。因此，一个良好的进步是致力于协助此统一，这将（除其他方面）提供了一种标准方法，可以将&lt;code class =“语言 -  plaintext Highlighter-rouge”>; json &lt;/code &lt;/code>;文件和将预测关联到每个引导加载程序条目。&lt;/p>; &lt;p>;生成和注册新键，或选择其他集合&lt;code class =“ language-plaintext Highlighter-rouge”>; pcr &lt;/code>; s今天是手动过程。可以扩展当前工具以在这些过程中提供帮助，也可以提供更好的文档。&lt;/p>; &lt;p>; &lt;code class =“ language-plaintext Highlighter-rouge”的新方法&lt;/code &lt;/code>;不是关于从等式中排除&lt;code class =“ language-plaintext Highlighter-rouge”>; grub2 &lt;/code>;。这是为了提供遵循&lt;code class =“ language-plaintext Highlighter-rouge”>; bls &lt;/code>;的不同引导加载程序的机会。验证适当的修补（duh！）&lt;code class =“ language-plaintext Highlighter-rouge”>; grub2 &lt;/code>;可以与所有这些合作。&lt;/p>; &lt;p>;，另一件事需要验证和改进的是具有多个加密磁盘的安装。原则上，设计和代码支持它（即使&lt;code class =“语言 -  plaintext Highlighter-rouge”>; pcr &lt;/code>;寄存器每卷都不同）。 &lt;code class =“ language-plaintext Highlighter-rouge”>; OpenQA &lt;/code>;将在这里创造奇迹。&lt;/p>; &lt;p>;，最后，如果&lt;code class =“ langaga-plaintext Highlighter-rouge”，我们应该重新考虑>; uki &lt;/code>; s对于不管是否有意义。如果我们朝那个方向迈进，则用于签署策略的专用密钥将保留在&lt;code class =“ language-plaintext Highlighter-rouge”>; obs &lt;/code &lt;/code>;中，并且这些策略也将在构建服务中生成一组不同的&lt;code class =“ language-plaintext Highlighter-rouge”>; pcr &lt;/code>;值。&lt;/p>; &lt;p>;无论如何，我们前面还有很多工作。&lt;/p>; &lt; H1 ID =“参考”>;参考&lt;/h1>;</content:encoded></item><item><guid> https://news.opensuse.org/2023/12/15/insights-from-the-os-logo-contest/</guid><title> OpenSuse徽标竞赛的见解</title><pubDate>Fri, 15 Dec 2023 15:00:00 +0000</pubDate><link/> https://news.opensuse.org/2023/12/15/insights-from-the-os-logo-contest/<author> admin@opensuse.org（Douglas Demaio） </author><enclosure length="71595" type="image/png" url="https://news.opensuse.org/wp-content/uploads/2023/12/winners.png"></enclosure><description>过去的几周对于OpenSuse项目来说，这是一个令人兴奋的时刻，有关该项目的视觉标识的讨论为人们对该项目及其品牌标识的各种看法提供了瞥见。 Opensuse徽标竞赛的最新结论引发了两者之间的广泛讨论。</description><content:encoded> &lt;p>;过去几周对于&lt;a href=&quot;https://www.opensuse.org/&quot;>; OpenSuse Project &lt;/a>;作为有关该项目的视觉认同的讨论，您可以瞥见人们对该项目及其品牌标识的各种看法。&lt;/p>; &lt;p>; OpenSuse徽标竞赛的最新结论引发了两位积极参与Opensuse项目的成员和参与该项目的成员的广泛讨论。&lt;/p>; &lt;&lt;/p>; &lt; P>;我们的徽标竞赛为我们提供了丰富的创造性意见和多样化的观点，为该项目的未来方向奠定了坚实的基础。&lt;/p>; &lt;p>;竞赛为许多领域的人提供了声音。 T与选择新徽标一样发声。虽然有些人在各种平台上发声，但比赛为Opensuse项目成员提供了一个机会，可以评估更广泛的社区如何看待该项目。&lt;/p>; &lt;p>;提交和投票成果使人们瞥见了公开的集体愿景 - 可能没有直接参与该项目而是至关重要的利益相关者。 &lt;/p>; &lt;p>;在本周讨论结果的社区会议上，参与者表达了Opensuse项目的成员有机会参加我们的新徽标的选择，而Suse则拥有商标对于OpenSuse徽标，请参与选择结果的品牌决策的过程。毕竟，这一决定影响了集体身份。&lt;/p>; &lt;p>;为了促进这一点，有一个计划在当前徽标和拟议的新设计之间组织投票，使我们的社区在这一重要决定中有发言权。此外，该项目的成员正在与Suse合作就品牌计划的含义进行合作，有些人表示希望Suse的意见以确保对OpenSuse的未来有一个偏见的愿景。&lt;/p>; &lt;p>;两步率先与主要利益相关者进行讨论和决策过程的方法对于推动行动计划并实施我们的品牌策略的任何更改至关重要。&lt;/p>; &lt;p>; &lt;/p>; &lt;p>;是拟议的步骤，该步骤将指导项目通过此旅程：&lt;/p>; &lt;p>; &lt;strong>;步骤1：&lt;/strong>; &lt;/p>; &lt;ul>; &lt;li>;评估比赛结果（完成）&lt;/li>; &lt;li>;评估前进的路径（已完成）&lt;/li>; &lt;li>;与Suse一起进行品牌考虑＆amp;评估贡献&lt;/li>; &lt;li>;品牌策略的介绍&lt;/li>; &lt;li>;社区投票参与&lt;/li>; &lt;li>;组织投票过程，以供OpenSuse项目成员在新旧徽标之间进行选择&lt;/li>; &lt;/ul>; &lt;p>; &lt;strong>;步骤2：&lt;/strong>; &lt;/p>; &lt;ul>; &lt;li>;与利益相关者的合作实施&lt;/li>; &lt;/ul>; &lt;p>;目的是确保在此过程中与OpenSuse项目的集体目标保持透明，包容性和一致。&lt;/p>; &lt;p>; &lt;/p>; &lt;p>;以详细审查调查徽标竞赛的结果，访问我们的&lt;a href=&quot;https://en.opensuse.org/logocontest&quot;>;徽标竞赛页面&lt;/a>;。&lt;/p>; &lt;p>;有兴趣成为OpenSuse成员的人访问我们的Wiki，&lt;a href=&quot;https://en.opensuse.org/opensuse:members#how_to_to_to_become_a_member&quot;>;如何成为会员热情。非常感谢所有提交设计和投票的人。已经联系了有关获胜的比赛的获胜者，并将被运送出一个Geeko Mystery Box。&lt;/p>; &lt;p>;跨各个类别的OpenSuse徽标竞赛的获胜者如下：&lt;/p>; &lt;ul>; &lt;li>; &lt;li>; &lt;li>; &lt;li>; &lt;li>; &lt; p>; openSuse：&lt;a href=&quot;https://en.opensuse.org/file：opensuse-hellcp.svg&quot;>; ao01 &lt;/a>; &lt;/a>; &lt;/p>; &lt;/p>; &lt;/li>; &lt;li>; &lt;li>; &lt;li>; &lt;li>; &lt;p>; tumbleweed：三-way tie &lt;a href=&quot;https://en.opensuse.org/images/e/e/e0/thumbleweed_logo_conpept.png&quot;>; ao31 &lt;/a>;，&lt;a href =“ Images/8/84/Tumbleweed_alt2.svg“>; ao05 &lt;/a>;和&lt;a href=&quot;https://en.opensuse.org/images/d0/d0/opensuse-tumbleweed_logo_scrub1701.png&quot;>; ao11 ao11 &lt;/ao11 ao11 &lt;/a >; &lt;/p>; &lt;/li>; &lt;li>; &lt;p>; leap：&lt;a href=&quot;https://en.opensuse.org/images/5/52/leap-hellcp1.svg&quot;>; ao01 &lt;/a>; &lt;/p>; &lt;/li>; &lt;li>; &lt;p>; slowroll：&lt;a href=&quot;https://en.opensuse.org/images/91/slowroll_logo_by_by_pprmint.svg&quot;>; ao03 &lt;/a>; &lt;/a>; &lt;/p >; &lt;/li>; &lt;li>; &lt;p>; kalpa：&lt;a href=&quot;https://en.opensuse.org/images/6/6/6/6f/kalpa_-_nikolayan%27s_logo.svg&quot;>; ao03 &lt;/a>; &lt;/a>; &lt;/>; p>; &lt;/li>; &lt;/ul>; &lt;meta name =“ opensuse，社区，竞争，徽标，投票，调查，调查，滚滚，leap，slowroll，slowroll，kalpa，aeon，aeeon，microos，leap micro” content =“ html，css，css，css，xml ，JavaScript“ />;</content:encoded></item><item><guid> https://news.opensuse.org/2023/12/08/llvm-sudo-gcc-packages-up-in-in-tw/</guid><title> Tumbleweed获取LLVM，Sudo，GCC更新</title><pubDate>Fri, 08 Dec 2023 07:00:00 +0000</pubDate><link/> https://news.opensuse.org/2023/12/08/llvm-sudo-gcc-packages-up-in-in-tw/<author> admin@opensuse.org（Douglas Demaio） </author><enclosure length="1484099" type="image/png" url="https://news.opensuse.org/wp-content/uploads/2023/11/llvm.png"></enclosure><description>本周，随着连续的快照随着新的软件更新而到达，Opensuse Tumbleweed一直在持续不断。 Mariadb，GTK和Gnome-Software是本周介绍的一系列更新的一部分，除了标题中突出显示的更新。快照20231206中只有两个包装。中文...</description><content:encoded> &lt;p>;本周&lt;a href=&quot;https://get.opensuse.org/&quot;>; opensuse &lt;/a>; &lt;a href=&quot;https://get.opensuse.org/tumbleweed/&quot;>; tumbleweed &lt;/a >;连续快照带有新的软件更新。&lt;/p>; &lt;p>; &lt;a href=&quot;https://mariadb.org/&quot;>; mariadb &lt;/a>;，&lt;a href =“ https ：//www.gtk.org/“>; gtk &lt;/a>;和&lt;a href=&quot;https://gitlab.gnome.org/gnome/gnome/gnome/gnome-software&quot;>; gnome-software&quot;>; gnome-software &lt;/a>;本周介绍的更新范围除了标题中突出显示的更新。&lt;/p>; &lt;p>;仅在快照中更新了两个软件包&lt;a href =“ https://lists.opensuse.org/archives/larchives/larchives/lanchives/list/factory @lists.opensuse.org/thread/wz2h7ooqfo3iqczioxzybofmi5f7yw5m/“>; 20231206 &lt;/a>;。中国农历日期库&lt;a href=&quot;https://github.com/yetist/lunar-date&quot;>; lunar-date &lt;/a>;具有3.0.1更新的新主要版本；它引入了局部界面并更改项目选项名称。该软件包还更新了其许可证，因为已更改为&lt;a href=&quot;https://www.gnu.org/licenses/old-licenses/lgpl-2.1.en.html&quot;>; lgpl-2.1 &lt;/a>;。更新&lt;a href=&quot;https://rubygems.org/gems/rubocop/versions/1.58.0?locale= en&quot;>;样式，提高一些代码质量并确保针对不同代码模式的更准确的自动校正。 1.58.0 &lt;a href=&quot;https://rubygems.org/gems/rubocop/versions/1.58.0?locale = en&quot;>; ruby​​gem-rubocop &lt;/a>;版本也在&lt;a a href = =“ https://lists.opensuse.org/archives/list/arm@lists.opensuse.org/thread/ke3w6g52jokmqx5lrtk3qahpxo265ey3/&quot;>; arm tumble tumbleweed 20231202 href =“ https://gitlab.gnome.org/gnome/gnome/gnome-shell”>; gnome-shell &lt;/a>; 45.2在Snapshot &lt;a href =“ https://lists.opensuse.org/archives/archives/archives/listives/list- /factory@lists.opensuse.org/thread/yz2z4inog444qziyhzmfnvkshtqspv5yjw/&quot;>; 20231205 &lt;/a>;。该发行版解决了几个性能问题，改进&lt;a href=&quot;https://www.gnome.org/&quot;>; GNOME &lt;/a>;的应用程序搜索功能，并修复了与屏幕键盘有关的错误。该更新改善了高对比度的样式，修复了平板电脑环和脱衣映射，解决了一些崩溃和更新的翻译。有一些错误修复程序，导致不必要的重新加载旅行查询，并使用&lt;a href=&quot;https://gitlab.gnome.org/gnome/gnome/gnome/gnome-maps&quot;>; gnome-maps&quot;>; gnome-maps &lt;/a>; 45.2。用&lt;a href=&quot;https://fwupd.org/&quot;>; fwupd &lt;/a>; 1.9.10更新以及错误修复程序进行了各种增强。值得注意的补充是支持&lt;code class =“ language-plaintext Highlighter-rouge”>; not_hardware &lt;/code>;要求和&lt;a href=&quot;https://en.wikipedia.org/wiki/wiki/wiki/loongson&quot;>; loongarch644 &lt;/a>;微处理器。该更新改善了USB索赔重试计数配置，执行版本要求，将敏感信息隐藏在调试日志中，并完善了设备特定功能，例如&lt;a href=&quot;https://en.wikipedia.org/wiki/wiki/wiki/wacom&quot;>; wacom wacom wacom &lt;/a>; USB设备仿真。 &lt;a href=&quot;https://www.sudo.ws/&quot;>; sudo &lt;/a>; 1.9.15p2地址的更新警告消息，增强对&lt;a href=&quot;https://en.wikipedia.org/wiki/row_hammer&quot;>; rowhammer &lt;/a>;攻击的安全性，并对日志消息进行改进，以获得更好的用户理解和系统安全。用于控制系统范围特权的应用程序开发工具包的123版更新，&lt;a href=&quot;https://gitlab.freedesktop.org/polkit/polkit/polkit&quot;>; polkit&quot;>; polkit &lt;/a>;引入了增强的安全措施，例如深度限制。在配置文件上，在&lt;a href=&quot;https://freedesktop.org/wiki/wiki/software/software/software/systemd/&quot;>; systemd &lt;/a>;下，对守护程序的所有者限制&lt;/a>;，并改善SystemD单元内的沙盒，以便更好地旨在更好地系统安全性。 。更新&lt;a href=&quot;https://www.sqlite.org/index.html&quot;>; sqlite3 &lt;/a>; 3.44.2纠正诸如&lt;a href =“ https://en.wikipedia.orgg/ Wiki/command-line_interface“>; cli &lt;/a>;错误，Full-Text Search（FTS5）在内部测试期间确定的问题和debug构建中的编译器警告在&lt;a href=&quot;https://gcc.gc.gnu.gnu.gn.gn.org/&quot;>;中构建。 GNU编译器集合&lt;/a>; 16.快照具有&lt;a href=&quot;https://github.com/vcrhonek/hwdata&quot;>; hwdata &lt;/a>; 0.377，&lt;a href =“ href =” https：// en https：/en en https：/en。 wikipedia.org/wiki/ncurses&quot;>; ncurses &lt;/a>; 6.4.20231202等。在&lt;a href=&quot;https://lists.opensuse.org/archives/list/list/arm@lists.opensuse.org/thread/thread/thread/ft5lbz5tcbg7ejacwcqtj7km2ibn2lha/&quot;>; Arm tumbleweed 20231205 &lt;/ &lt;/p>; &lt;p>;几个&lt;a href=&quot;https://www.qt.io/product/qt6&quot;>; qt 6 &lt;/a>; Subpackages在快照中更新了Subpackages 。 6.6.1版本的&lt;a href=&quot;https://www.qt.io/&quot;>; qt6-base &lt;/a>;修复&lt;code class =“ lategan-plaintext Highlighter-rouge”>; qmenubar &lt;/code &lt;/code>;功能>;功能限制并纠正与&lt;code class =“ language-plaintext Highlighter-rouge”有关的错误&lt;/a>;。更新&lt;a href=&quot;https://www.qt.io/&quot;>; qt6-wayland &lt;/a>; 6.6.1修复了与纹理孤儿院相关的崩溃，并用&lt;a href = a &lt;a href =”解决了拖放问题https://wayland.freedesktop.org/&quot;>; Wayland &lt;/a>;显示。 &lt;a href=&quot;https://github.com/ibus/ibus&quot;>; ibus &lt;/a>; 1.5.29增强连续集成（CI）的更新，将信号添加到&lt;code class =“ language-plaintext Highlighter-rouge “>; PostrocessKeyEvent &lt;/code>;，它可以防止输入方法犯下一个选项卡并修复密钥键入，表情符号和Unicode问题。 The &lt;a href=&quot;https://www.libguestfs.org/&quot;>;libguestfs&lt;/a>; 1.51.8 package, which is a tool for accessing and modifying virtual machine (VM) disk images, adds a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;>;--chown&lt;/code>; option for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;>;virt-customize&lt;/code>; and a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;>;--tar-in&lt;/code>; operation. A few other packages were updated in the snapshot.&lt;/p>; &lt;p>;An update of snapshot &lt;a href=&quot;https://llvm.org/&quot;>;llvm17&lt;/a>; 17.0.6 landed in snapshot &lt;a href=&quot;https://lists.opensuse.org/archives/list/factory@lists.opensuse.org/thread/IAJ2F5ZKXLLGKBL5227TGVRTMHHM3DBD/&quot;>;20231203&lt;/a>;. The update for the compiler and toolchain package includes rebase patches, adjustments to the versioned executables for better support, and standardizes the management of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;>;clang-cpp&lt;/code>; using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;>;update-alternatives&lt;/code>; akin to other binaries for smoother operation. The 11.1.2 version of &lt;a href=&quot;https://mariadb.org/&quot;>;mariadb&lt;/a>; includes several fixes related to unwanted binary locations, memory constraints on &lt;a href=&quot;https://en.wikipedia.org/wiki/Ppc64&quot;>;ppc64le&lt;/a>; and skipped tests. An update of the a calendar widget for Chinese lunar library &lt;a href=&quot;https://github.com/yetist/lunar-calendar&quot;>;lunar-calendar&lt;/a>; 3.0.1 involves a modification of the license that transitions to &lt;a href=&quot;https://www.gnu.org/licenses/old-licenses/lgpl-2.1.en.html&quot;>;LGPL-2.1&lt;/a>; from the previous licensing terms.&lt;/p>; &lt;p>;An update of &lt;a href=&quot;https://gitlab.gnome.org/GNOME/gnome-software&quot;>;gnome-software&lt;/a>; 45.2 came in snapshot &lt;a href=&quot;https://lists.opensuse.org/archives/list/factory@lists.opensuse.org/thread/5FTRUNXH23ZWKX37LVEZIWTBB5O3W4W5/&quot;>;20231202&lt;/a>; and primarily focuses on translations updates for multiple languages, according to the changelog. An older &lt;a href=&quot;https://gcc.gnu.org/&quot;>;GNU Compiler Collection&lt;/a>; had a &lt;a href=&quot;https://github.com/git&quot;>;git&lt;/a>; update with &lt;a href=&quot;https://gcc.gnu.org/&quot;>;gcc13&lt;/a>; 13.2.1+git8109. It had fix for building &lt;a href=&quot;https://mariadb.org/&quot;>;MariaDB&lt;/a>; on &lt;a href=&quot;https://en.wikipedia.org/wiki/P6_(microarchitecture)&quot;>;i686 systems&lt;/a>; and implements changes related to &lt;a href=&quot;https://llvm.org/&quot;>;LLVM&lt;/a>; dependency. An update of &lt;a href=&quot;https://inkscape.org/&quot;>;inkscape&lt;/a>; 1.3.2 addresses a data loss issue and corrects a saving error related to some shapes and 3D boxes. The app for organizing personal data and scheduling, &lt;a href=&quot;https://wiki.gnome.org/Apps/Evolution&quot;>;evolution&lt;/a>;, updates to version 3.50.2 and fixes a crash and a &lt;a href=&quot;https://en.wikipedia.org/wiki/Memory_leak&quot;>;memory leak&lt;/a>;; it also fixes an issue with the search functionality. The &lt;a href=&quot;https://www.gtk.org/&quot;>;gtk4&lt;/a>; 4.12.4 update improves accessibility name computation, fixes memory format table errors, updated translations and makes some additional refinements.&lt;/p>; &lt;p>;The snapshot starting off the week was &lt;a href=&quot;https://lists.opensuse.org/archives/list/factory@lists.opensuse.org/thread/K2BJRCMU6NM3B5ZQTSDJ5UV7LM6RUMOT/&quot;>;20231201&lt;/a>;. An update of &lt;a href=&quot;https://www.perl.org/&quot;>;perl&lt;/a>; 5.38.2 fixes two &lt;a href=&quot;https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures&quot;>;Common Vulnerabilities and Exposures&lt;/a>;. One of those was &lt;a href=&quot;https://www.suse.com/security/cve/CVE-2023-47038.html&quot;>;CVE-2023-47038&lt;/a>;, which occurs when a crafted regular expression is compiled by perl. The other was &lt;a href=&quot;https://www.suse.com/security/cve/CVE-2023-47039.html&quot;>;CVE-2023-47039&lt;/a>;. &lt;a href=&quot;https://github.com/openSUSE/snapper&quot;>;Snapper&lt;/a>; 0.10.7 addresses issues related to diff for &lt;a href=&quot;https://en.wikipedia.org/wiki/Logical_volume_management&quot;>;Logical Volume Manager&lt;/a>;-based configs and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;>;SystemCmd&lt;/code>; accepting a collection of strings. An update of &lt;a href=&quot;https://git.kernel.org/pub/scm/network/iproute2/iproute2.git&quot;>;iproute2&lt;/a>; 6.6 removes several features and adds backup support in the bridge along with adjustments for the security protocol suite. Other packages to update in the snapshot were &lt;a href=&quot;https://mirrors.edge.kernel.org/pub/software/network/ethtool/&quot;>;ethtool&lt;/a>; 6.6, &lt;a href=&quot;https://www.gnupg.org/related_software/gpgme/&quot;>;gpgme&lt;/a>; 1.23.2 and more.&lt;/p>; &lt;p>;Two other Arm Tumbleweed snapshots this week were &lt;a href=&quot;https://lists.opensuse.org/archives/list/arm@lists.opensuse.org/thread/HVWNVYJO2SATG4QZLTYXMVQOEV4RYFYB/&quot;>;20231204&lt;/a>; and &lt;a href=&quot;https://lists.opensuse.org/archives/list/arm@lists.opensuse.org/thread/2GRYHK42UHIDDWFE7NQ6PTHUMXT3KTBT/&quot;>;20231203&lt;/a>;.&lt;/p>; &lt;meta name=&quot;openSUSE, Tumbleweed, Developers, sysadmin, user, Open Source, rolling release, gamers, superuser, distrowatch, hacker, llvm, sudo, gcc, mariadb, gnome, wayland, fwupd, wacom, polkit, systemd, sqlite, hwdata, ncurse, qt, ibus, clang, evolution, gtk, snapper, ethtool, gpgme, lgpl&quot; content=&quot;HTML,CSS,XML,JavaScript&quot; />;</content:encoded></item></channel></rss>